package persistence;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;

import exception.CCException;
import object.Cabin;
import object.Feature;

public class FeatureManager {

	public static void store(Feature feature) throws CCException
	{
		String insertSQL = "INSERT INTO feature (feature_string, cabin_id) VALUES"
				+" (?,?)";
		String updateSQL = "UPDATE feature SET feature_string = ?, cabin_id = ? WHERE id = ?";
		Connection con = DbAccessImpl.connect();
		PreparedStatement ps;
		int rowsModified;
		
		try 
		{
			// test is object is already in database to determine insert or update
			if( feature.getId() >= 0 )
				ps = con.prepareStatement( updateSQL );
			else
				ps = con.prepareStatement( insertSQL );
			
			// set the PreparedStatement parameters to values given from Feature or to sql null values if nullable
			if(feature.getFeatureString() != null) ps.setString(1, feature.getFeatureString());
			else ps.setNull(1, java.sql.Types.VARCHAR);
			
			if(feature.getCabin() != null) ps.setInt(2, feature.getCabin().getId());
			else ps.setNull(2, java.sql.Types.INTEGER);
			
			// set id if query is an update
			if( feature.getId() >= 0 )
				ps.setInt( 3, feature.getId() );
			
			//execute the query
			rowsModified = DbAccessImpl.update(con, ps);
			
			// set the id value assigned by the database to the user object
			if( rowsModified >= 1 ) 
			{
				if(feature.getId() < 0)
				{
				    String sql = "select last_insert_id()";
				    if( ps.execute( sql ) ) // statement returned a result
				    { 
					   // retrieve the result
					   ResultSet r = ps.getResultSet();
					
					   while( r.next() ) 
					   {
						   // retrieve the last insert auto_increment value
						   int featureId = r.getInt( 1 );
						   if( featureId > 0 )
							   feature.setId( featureId ); // set the user Id for this object 
					   }
			     	 }
				}
		     }else { 
		    	 DbAccessImpl.disconnect(con);
		    	 throw new CCException("FeatureManager.store: failed to save a feature");
			 }			
		}catch(SQLException e){
			DbAccessImpl.disconnect(con);
			throw new CCException("FeatureManager.store: failed to save a feature: " + e );
		}
		
		DbAccessImpl.disconnect(con);
	} //end of store
	
	public static List<Feature> restore( Feature modelFeature) throws CCException
	{
		String  selectFeatureSql = "select id, feature_string from feature"; 
		Statement    statement = null;
		StringBuffer query = new StringBuffer( 250 );
		StringBuffer condition = new StringBuffer( 250 );
		List<Feature> features = new LinkedList<Feature>();
		Connection con = DbAccessImpl.connect();

		condition.setLength( 0 );
		query.append( selectFeatureSql );

		// append where clauses to query for each specified field of the modelFeature
		if( modelFeature != null ) {
			if( modelFeature.getId() >= 0 ) // id is unique, so it is sufficient to get a Cabin
				query.append( " where id = " + modelFeature.getId() );
			else {	// no id is given		
				if( modelFeature.getFeatureString() != null )
					condition.append( " address = '" + modelFeature.getFeatureString() + "'");
				if( condition.length() > 0 ) {
					query.append(  " where " );
					query.append( condition );
				}
			}
		}
		
		try {			
			statement = con.createStatement();
			
			if( statement.execute( query.toString() ) ) { // statement returned a result
				
				// fields of a cabin object
				int   	id;
				String 	featureString;
				
				// retrieve the ResultSet generated by the execution of the query
				ResultSet rs = statement.getResultSet();

				while( rs.next() ) { // process the result set

					// retrieve the values from an entry in the result set
					id = rs.getInt(1);
					featureString = rs.getString(2);

					// create a proxy object
					Feature feature = new Feature( featureString );
					feature.setId( id );
					feature.setCabin(null);
					
					features.add( feature );
				}
				
				DbAccessImpl.disconnect(con);
				return features;
				
			} else {
				DbAccessImpl.disconnect(con);
				return null;
			}
		}
		catch( SQLException e ) {   
			DbAccessImpl.disconnect(con);
			throw new CCException("FeatureManager.restore: Could not restore persistent Feature objects: " + e );
		}		
	}//end of restore
	
	public static Cabin restoreCabinFromFeature( Feature feature ) throws CCException
	{
		String sqlQuery = "SELECT cabin.id, address, city, state, description, title, bedroom_count, bath_count, maxOccupancy FROM cabin"
						+ "	JOIN feature ON cabin.id = feature.cabin_id"
						+ "	WHERE feature.id = ?";
		
		Connection con = DbAccessImpl.connect();
		ResultSet rs;
		Cabin cabin;
		
		try {
			// prepare and execute the query
			PreparedStatement ps = con.prepareStatement( sqlQuery );
			ps.setInt( 1, feature.getId() );
			rs = ps.executeQuery();
			
			if( rs.next() ) { // there is an entry in the result set
				
				// retrieve the values from the result set
				int id = rs.getInt(1);
				String address = rs.getString(2);
				String city = rs.getString(3);
				String state = rs.getString(4);
				String description = rs.getString(5);
				String title = rs.getString(6);
				int	bedroomCount = rs.getInt(7);
				float bathCount = rs.getFloat(8);
				int	maxOccupancy = rs.getInt(9);
				
				// create the proxy object
				cabin = new Cabin( address, city, state, description, title, bedroomCount, bathCount, maxOccupancy );
				cabin.setId( id );
				cabin.setUser( null );
				cabin.setAmenities( null );
				
				DbAccessImpl.disconnect(con);
				return cabin;
			} else { // no matches found for the query
				DbAccessImpl.disconnect(con);
				return null;
			}
		} catch( SQLException e ) {
			DbAccessImpl.disconnect(con);
			throw new CCException("FeatureManager.restoreCabinFromFeature: could not restore persistent Cabin object: " + e );
		}
	} //end of restoreCabinFromFeature
	
	public static void delete(Feature feature) throws CCException
	{
		String query = "DELETE FROM feature WHERE id = ?";
		PreparedStatement ps;
		Connection con = DbAccessImpl.connect();
		int rowsModified;
		
		if(feature.getId() < 0) //object no in database
			return;
		
		try {
			ps = con.prepareStatement(query);
			ps.setInt(1,  feature.getId());
			rowsModified = ps.executeUpdate();
			
			if(rowsModified != 1)
				throw new CCException("FeatureManager.delete: failed to delete feature");
		}catch(SQLException e) {
			throw new CCException("FeatureManager.delte: failed to delete feature: " + e);
		}
		
		DbAccessImpl.disconnect(con);
		
	} //end of delete
	
}